-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Type definitions for Universally Unique Identifiers
--   
--   This library contains type definitions for <a>Universally Unique
--   Identifiers (UUID)</a> (as specified in <a>RFC 4122</a>) and basic
--   conversion functions.
--   
--   See also the <a>'uuid' package</a> providing a high-level API for
--   managing the different UUID versions.
@package uuid-types
@version 1.0.5.1


-- | This library is useful for comparing, parsing and printing
--   <a>Universally Unique Identifiers (UUID)</a>. See <a>RFC 4122</a> for
--   the specification.
module Data.UUID.Types

-- | Type representing <a>Universally Unique Identifiers (UUID)</a> as
--   specified in <a>RFC 4122</a>.
data UUID

-- | The <a>nil</a> UUID, as defined in <a>RFC 4122</a>. It is a UUID of
--   all zeros. <tt><a>null</a> u</tt> <i>iff</i> <tt><tt>u</tt> ==
--   <a>nil</a></tt>.
nil :: UUID

-- | Returns true if the passed-in UUID is the <a>nil</a> UUID.
null :: UUID -> Bool

-- | Convert a UUID into a hypenated string using lower-case letters.
--   Example:
--   
--   <pre>
--   &gt;&gt;&gt; toString &lt;$&gt; fromString "550e8400-e29b-41d4-a716-446655440000"
--   Just "550e8400-e29b-41d4-a716-446655440000"
--   </pre>
toString :: UUID -> String

-- | If the passed in <a>String</a> can be parsed as a <a>UUID</a>, it will
--   be. The hyphens may not be omitted. Example:
--   
--   <pre>
--   &gt;&gt;&gt; fromString "c2cc10e1-57d6-4b6f-9899-38d972112d8c"
--   Just c2cc10e1-57d6-4b6f-9899-38d972112d8c
--   </pre>
--   
--   Hex digits may be upper or lower-case.
fromString :: String -> Maybe UUID

-- | Convert a UUID into a hyphentated string using lower-case letters.
toText :: UUID -> Text

-- | If the passed in <a>Text</a> can be parsed as an ASCII representation
--   of a <a>UUID</a>, it will be. The hyphens may not be omitted.
fromText :: Text -> Maybe UUID

-- | Convert a UUID into a hyphentated string using lower-case letters,
--   packed as ASCII bytes into <a>ByteString</a>.
--   
--   This should be equivalent to <a>toString</a> with <a>pack</a>.
toASCIIBytes :: UUID -> ByteString

-- | If the passed in <a>ByteString</a> can be parsed as an ASCII
--   representation of a <a>UUID</a>, it will be. The hyphens may not be
--   omitted.
--   
--   This should be equivalent to <a>fromString</a> with <a>unpack</a>.
fromASCIIBytes :: ByteString -> Maybe UUID

-- | Similar to <a>toASCIIBytes</a> except we produce a lazy
--   <a>ByteString</a>.
toLazyASCIIBytes :: UUID -> ByteString

-- | Similar to <a>fromASCIIBytes</a> except parses from a lazy
--   <a>ByteString</a>.
fromLazyASCIIBytes :: ByteString -> Maybe UUID

-- | Encode a UUID into a <tt>ByteString</tt> in network order.
--   
--   This uses the same encoding as the <a>Binary</a> instance.
toByteString :: UUID -> ByteString

-- | Extract a UUID from a <tt>ByteString</tt> in network byte order. The
--   argument must be 16 bytes long, otherwise <a>Nothing</a> is returned.
fromByteString :: ByteString -> Maybe UUID

-- | Convert a <a>UUID</a> into a sequence of <a>Word32</a> values. Useful
--   for when you need to serialize a UUID and neither <a>Storable</a> nor
--   <a>Binary</a> are appropriate.
--   
--   <pre>
--   &gt;&gt;&gt; toWords &lt;$&gt; fromString "550e8400-e29b-41d4-a716-446655440000"
--   Just (1427014656,3801825748,2803254374,1430519808)
--   </pre>
--   
--   See also <a>toWords64</a>.
--   
--   <i>Since: <tt>uuid-1.2.2</tt></i>
toWords :: UUID -> (Word32, Word32, Word32, Word32)

-- | Create a <a>UUID</a> from a sequence of <a>Word32</a>. The inverse of
--   <a>toWords</a>. Useful when you need a total function for constructing
--   <a>UUID</a> values.
--   
--   See also <a>fromWords64</a>.
--   
--   <i>Since: <tt>uuid-1.2.2</tt></i>
fromWords :: Word32 -> Word32 -> Word32 -> Word32 -> UUID

-- | Convert a <a>UUID</a> into a pair of <a>Word64</a>s.
--   
--   <pre>
--   &gt;&gt;&gt; toWords64 &lt;$&gt; fromString "550e8400-e29b-41d4-a716-446655440000"
--   Just (6128981282234515924,12039885860129472512)
--   </pre>
--   
--   See also <a>toWords</a>.
toWords64 :: UUID -> (Word64, Word64)

-- | Create a <a>UUID</a> from a pair of <a>Word64</a>s.
--   
--   Inverse of <a>toWords64</a>. See also <a>fromWords</a>.
fromWords64 :: Word64 -> Word64 -> UUID
