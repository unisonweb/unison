-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | High-resolution clock functions: monotonic, realtime, cputime.
--   
--   A package for convenient access to high-resolution clock and timer
--   functions of different operating systems via a unified API.
--   
--   POSIX code and surface API was developed by Cetin Sert in 2009.
--   
--   Windows code was contributed by Eugene Kirpichov in 2010.
--   
--   FreeBSD code was contributed by Finn Espen Gundersen on 2013-10-14.
--   
--   OS X code was contributed by Gerolf Seitz on 2013-10-15.
--   
--   Derived <tt>Generic</tt>, <tt>Typeable</tt> and other instances for
--   <tt>Clock</tt> and <tt>TimeSpec</tt> was contributed by Mathieu
--   Boespflug on 2014-09-17.
--   
--   Corrected dependency listing for <tt>GHC &lt; 7.6</tt> was contributed
--   by Brian McKenna on 2014-09-30.
--   
--   Windows code corrected by Dimitri Sabadie on 2015-02-09.
--   
--   Added <tt>timeSpecAsNanoSecs</tt> as observed widely-used by Chris
--   Done on 2015-01-06, exported correctly on 2015-04-20.
--   
--   Imported Control.Applicative operators correctly for Haskell Platform
--   on Windows on 2015-04-21.
--   
--   Unit tests and instance fixes by Christian Burger on 2015-06-25.
--   
--   Removal of fromInteger : Integer -&gt; TimeSpec by Cetin Sert on
--   2015-12-15.
--   
--   New Linux-specific Clocks: MonotonicRaw, Boottime, MonotonicCoarse,
--   RealtimeCoarse by Cetin Sert on 2015-12-15.
--   
--   Reintroduction fromInteger : Integer -&gt; TimeSpec by Cetin Sert on
--   2016-04-05.
--   
--   Fixes for older Linux build failures introduced by new Linux-specific
--   clocks by Mario Longobardi on 2016-04-18.
--   
--   Refreshment release in 2019-04 after numerous contributions.
--   
--   Refactoring for Windows, Mac implementation consistence by Alexander
--   Vershilov on 2021-01-16.
--   
--   <ul>
--   <li><i>Version Scheme</i> Major-<tt><i>R</i></tt>-ewrite .
--   New-<tt><i>F</i></tt>-unctionality .
--   <tt><i>I</i></tt>-mprovementAndBugFixes .
--   <tt><i>P</i></tt>-ackagingOnly</li>
--   </ul>
--   
--   <ul>
--   <li><tt>PackagingOnly</tt> changes are made for quality assurance
--   reasons.</li>
--   </ul>
@package clock
@version 0.8.4


-- | High-resolution, realtime clock and timer functions for Posix systems.
--   This module is being developed according to IEEE Std 1003.1-2008:
--   <a>http://www.opengroup.org/onlinepubs/9699919799/</a>,
--   <a>http://www.opengroup.org/onlinepubs/9699919799/functions/clock_getres.html#</a>
module System.Clock

-- | Clock types. A clock may be system-wide (that is, visible to all
--   processes) or per-process (measuring time that is meaningful only
--   within a process). All implementations shall support <a>Realtime</a>.
data Clock

-- | The identifier for the system-wide monotonic clock, which is defined
--   as a clock measuring real time, whose value cannot be set via
--   <tt>clock_settime</tt> and which cannot have negative clock jumps. The
--   maximum possible clock jump shall be implementation defined. For this
--   clock, the value returned by <a>getTime</a> represents the amount of
--   time (in seconds and nanoseconds) since an unspecified point in the
--   past (for example, system start-up time, or the Epoch). This point
--   does not change after system start-up time. Note that the absolute
--   value of the monotonic clock is meaningless (because its origin is
--   arbitrary), and thus there is no need to set it. Furthermore, realtime
--   applications can rely on the fact that the value of this clock is
--   never set. (Identical to <a>Boottime</a> since Linux 4.17, see
--   <a>https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=d6ed449afdb38f89a7b38ec50e367559e1b8f71f)</a>
--   <tt>CLOCK_MONOTONIC</tt> (macOS - <tt>SYSTEM_CLOCK</tt>)
Monotonic :: Clock

-- | The identifier of the system-wide clock measuring real time. For this
--   clock, the value returned by <a>getTime</a> represents the amount of
--   time (in seconds and nanoseconds) since the Epoch.
--   <tt>CLOCK_REALTIME</tt> (macOS - <tt>CALENDAR_CLOCK</tt>, Windows -
--   <tt>GetSystemTimeAsFileTime</tt>)
Realtime :: Clock

-- | The identifier of the CPU-time clock associated with the calling
--   process. For this clock, the value returned by <a>getTime</a>
--   represents the amount of execution time of the current process.
ProcessCPUTime :: Clock

-- | The identifier of the CPU-time clock associated with the calling OS
--   thread. For this clock, the value returned by <a>getTime</a>
--   represents the amount of execution time of the current OS thread.
ThreadCPUTime :: Clock

-- | (since Linux 2.6.28, macOS 10.12) Similar to <a>Monotonic</a>, but
--   provides access to a raw hardware-based time that is not subject to
--   NTP adjustments or the incremental adjustments performed by
--   adjtime(3). <tt>CLOCK_MONOTONIC_RAW</tt> (Windows -
--   <tt>QueryPerformanceCounter</tt>, <tt>QueryPerformanceFrequency</tt>)
MonotonicRaw :: Clock

-- | (since Linux 2.6.39; Linux-specific) Identical to <a>Monotonic</a>,
--   except it also includes any time that the system is suspended. This
--   allows applications to get a suspend-aware monotonic clock without
--   having to deal with the complications of <a>Realtime</a>, which may
--   have discontinuities if the time is changed using settimeofday(2).
--   (since Linux 4.17; identical to <a>Monotonic</a>)
--   <tt>CLOCK_BOOTTIME</tt>
Boottime :: Clock

-- | (since Linux 2.6.32; Linux-specific) A faster but less precise version
--   of <a>Monotonic</a>. Use when you need very fast, but not fine-grained
--   timestamps. <tt>CLOCK_MONOTONIC_COARSE</tt>
MonotonicCoarse :: Clock

-- | (since Linux 2.6.32; Linux-specific) A faster but less precise version
--   of <a>Realtime</a>. Use when you need very fast, but not fine-grained
--   timestamps. <tt>CLOCK_REALTIME_COARSE</tt>
RealtimeCoarse :: Clock

-- | TimeSpec structure
data TimeSpec
TimeSpec :: {-# UNPACK #-} !Int64 -> {-# UNPACK #-} !Int64 -> TimeSpec

-- | seconds
[sec] :: TimeSpec -> {-# UNPACK #-} !Int64

-- | nanoseconds
[nsec] :: TimeSpec -> {-# UNPACK #-} !Int64

-- | The <a>getTime</a> function shall return the current value for the
--   specified clock.
getTime :: Clock -> IO TimeSpec

-- | The <a>getRes</a> function shall return the resolution of any clock.
--   Clock resolutions are implementation-defined and cannot be set by a
--   process.
getRes :: Clock -> IO TimeSpec

-- | TimeSpec from nano seconds.
fromNanoSecs :: Integer -> TimeSpec

-- | TimeSpec to nano seconds.
toNanoSecs :: TimeSpec -> Integer

-- | Compute the absolute difference.
diffTimeSpec :: TimeSpec -> TimeSpec -> TimeSpec

-- | TimeSpec as nano seconds.

-- | <i>Deprecated: Use toNanoSecs instead! Replaced timeSpecAsNanoSecs
--   with the same signature TimeSpec -&gt; Integer</i>
timeSpecAsNanoSecs :: TimeSpec -> Integer
normalize :: TimeSpec -> TimeSpec
s2ns :: Num a => a
instance GHC.Show.Show System.Clock.Clock
instance GHC.Read.Read System.Clock.Clock
instance GHC.Generics.Generic System.Clock.Clock
instance GHC.Enum.Enum System.Clock.Clock
instance GHC.Classes.Eq System.Clock.Clock
instance GHC.Show.Show System.Clock.TimeSpec
instance GHC.Read.Read System.Clock.TimeSpec
instance GHC.Generics.Generic System.Clock.TimeSpec
instance Foreign.Storable.Storable System.Clock.TimeSpec
instance GHC.Num.Num System.Clock.TimeSpec
instance GHC.Enum.Enum System.Clock.TimeSpec
instance GHC.Real.Real System.Clock.TimeSpec
instance GHC.Real.Integral System.Clock.TimeSpec
instance GHC.Classes.Eq System.Clock.TimeSpec
instance GHC.Classes.Ord System.Clock.TimeSpec
instance GHC.Enum.Bounded System.Clock.TimeSpec

module System.Clock.Seconds

-- | Clock types. A clock may be system-wide (that is, visible to all
--   processes) or per-process (measuring time that is meaningful only
--   within a process). All implementations shall support <a>Realtime</a>.
data Clock

-- | The identifier for the system-wide monotonic clock, which is defined
--   as a clock measuring real time, whose value cannot be set via
--   <tt>clock_settime</tt> and which cannot have negative clock jumps. The
--   maximum possible clock jump shall be implementation defined. For this
--   clock, the value returned by <a>getTime</a> represents the amount of
--   time (in seconds and nanoseconds) since an unspecified point in the
--   past (for example, system start-up time, or the Epoch). This point
--   does not change after system start-up time. Note that the absolute
--   value of the monotonic clock is meaningless (because its origin is
--   arbitrary), and thus there is no need to set it. Furthermore, realtime
--   applications can rely on the fact that the value of this clock is
--   never set. (Identical to <a>Boottime</a> since Linux 4.17, see
--   <a>https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=d6ed449afdb38f89a7b38ec50e367559e1b8f71f)</a>
--   <tt>CLOCK_MONOTONIC</tt> (macOS - <tt>SYSTEM_CLOCK</tt>)
Monotonic :: Clock

-- | The identifier of the system-wide clock measuring real time. For this
--   clock, the value returned by <a>getTime</a> represents the amount of
--   time (in seconds and nanoseconds) since the Epoch.
--   <tt>CLOCK_REALTIME</tt> (macOS - <tt>CALENDAR_CLOCK</tt>, Windows -
--   <tt>GetSystemTimeAsFileTime</tt>)
Realtime :: Clock

-- | The identifier of the CPU-time clock associated with the calling
--   process. For this clock, the value returned by <a>getTime</a>
--   represents the amount of execution time of the current process.
ProcessCPUTime :: Clock

-- | The identifier of the CPU-time clock associated with the calling OS
--   thread. For this clock, the value returned by <a>getTime</a>
--   represents the amount of execution time of the current OS thread.
ThreadCPUTime :: Clock

-- | (since Linux 2.6.28, macOS 10.12) Similar to <a>Monotonic</a>, but
--   provides access to a raw hardware-based time that is not subject to
--   NTP adjustments or the incremental adjustments performed by
--   adjtime(3). <tt>CLOCK_MONOTONIC_RAW</tt> (Windows -
--   <tt>QueryPerformanceCounter</tt>, <tt>QueryPerformanceFrequency</tt>)
MonotonicRaw :: Clock

-- | (since Linux 2.6.39; Linux-specific) Identical to <a>Monotonic</a>,
--   except it also includes any time that the system is suspended. This
--   allows applications to get a suspend-aware monotonic clock without
--   having to deal with the complications of <a>Realtime</a>, which may
--   have discontinuities if the time is changed using settimeofday(2).
--   (since Linux 4.17; identical to <a>Monotonic</a>)
--   <tt>CLOCK_BOOTTIME</tt>
Boottime :: Clock

-- | (since Linux 2.6.32; Linux-specific) A faster but less precise version
--   of <a>Monotonic</a>. Use when you need very fast, but not fine-grained
--   timestamps. <tt>CLOCK_MONOTONIC_COARSE</tt>
MonotonicCoarse :: Clock

-- | (since Linux 2.6.32; Linux-specific) A faster but less precise version
--   of <a>Realtime</a>. Use when you need very fast, but not fine-grained
--   timestamps. <tt>CLOCK_REALTIME_COARSE</tt>
RealtimeCoarse :: Clock
newtype Seconds
Seconds :: TimeSpec -> Seconds
[toTimeSpec] :: Seconds -> TimeSpec

-- | The <a>getTime</a> function shall return the current value for the
--   specified clock.
getTime :: Clock -> IO Seconds

-- | The <a>getRes</a> function shall return the resolution of any clock.
--   Clock resolutions are implementation-defined and cannot be set by a
--   process.
getRes :: Clock -> IO Seconds

-- | Seconds from nano seconds.
fromNanoSecs :: Integer -> Seconds

-- | Seconds to nano seconds.
toNanoSecs :: Seconds -> Integer

-- | Compute the absolute difference.
diffTimeSpec :: Seconds -> Seconds -> Seconds
instance GHC.Enum.Bounded System.Clock.Seconds.Seconds
instance Foreign.Storable.Storable System.Clock.Seconds.Seconds
instance GHC.Classes.Ord System.Clock.Seconds.Seconds
instance GHC.Classes.Eq System.Clock.Seconds.Seconds
instance GHC.Show.Show System.Clock.Seconds.Seconds
instance GHC.Read.Read System.Clock.Seconds.Seconds
instance GHC.Generics.Generic System.Clock.Seconds.Seconds
instance GHC.Num.Num System.Clock.Seconds.Seconds
instance GHC.Enum.Enum System.Clock.Seconds.Seconds
instance GHC.Real.Real System.Clock.Seconds.Seconds
instance GHC.Real.Fractional System.Clock.Seconds.Seconds
instance GHC.Real.RealFrac System.Clock.Seconds.Seconds
