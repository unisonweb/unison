-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


@package unison-util-term
@version 0.0.0

module U.Util.Term
text :: Ord v => Term (F' text termRef typeRef termLink typeLink vt) v a -> [text]
dependencies :: Ord v => Term (F' text termRef typeRef termLink typeLink vt) v a -> ([termRef], [typeRef], [termLink], [typeLink])

module U.Util.Type
effect :: Ord v => [TypeR r v] -> TypeR r v -> TypeR r v
effects :: Ord v => [TypeR r v] -> TypeR r v
removeAllEffectVars :: Var v => TypeR r v -> TypeR r v
removeEffectVars :: Var v => Set v -> TypeR r v -> TypeR r v
flattenEffects :: TypeR r v -> [TypeR r v]

-- | Bind the given variables with an outer <tt>forall</tt>, if they are
--   used in <tt>t</tt>.
generalize :: Ord v => [v] -> TypeR r v -> TypeR r v
pattern ForallsNamed' :: [v] -> TypeR r v -> TypeR r v
pattern ForallNamed' :: v -> TypeR r v -> TypeR r v
pattern Effects' :: [TypeR r v] -> TypeR r v
pattern Effect1' :: TypeR r v -> TypeR r v -> TypeR r v
pattern Ref' :: r -> TypeR r v
forAll :: Ord v => v -> TypeR r v -> TypeR r v
unforall' :: TypeR r v -> ([v], TypeR r v)
unForalls :: TypeR r v -> Maybe ([v], TypeR r v)
