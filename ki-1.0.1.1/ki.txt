-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | A lightweight structured concurrency library
--   
--   A lightweight structured concurrency library.
--   
--   For a variant of this API generalized to
--   <tt><a>MonadUnliftIO</a></tt>, see <tt><a>ki-unlifted</a></tt>.
--   
--   Remember to link your program with <tt>-threaded</tt> to use the
--   threaded runtime!
@package ki
@version 1.0.1.1


-- | <tt>ki</tt> is a lightweight structured concurrency library.
--   
--   For a variant of this API generalized to
--   <tt><a>MonadUnliftIO</a></tt>, see <tt><a>ki-unlifted</a></tt>.
--   
--   Remember to link your program with <tt>-threaded</tt> to use the
--   threaded runtime!
module Ki

-- | A scope.
--   
--   <h4><b>ðŸ‘‰ Details</b></h4>
--   
--   <ul>
--   <li>A scope delimits the lifetime of all threads created within
--   it.</li>
--   </ul>
--   
--   <ul>
--   <li>A scope is only valid during the callback provided to
--   <a>scoped</a>.</li>
--   <li>The thread that creates a scope is considered the parent of all
--   threads created within it.</li>
--   <li>All threads created within a scope can be awaited together (see
--   <a>awaitAll</a>).</li>
--   <li>All threads created within a scope are terminated when the scope
--   closes.</li>
--   </ul>
data Scope

-- | A thread.
--   
--   <h4><b>ðŸ‘‰ Details</b></h4>
--   
--   <ul>
--   <li>A thread's lifetime is delimited by the scope in which it was
--   created.</li>
--   </ul>
--   
--   <ul>
--   <li>The thread that creates a scope is considered the parent of all
--   threads created within it.</li>
--   <li>If an exception is raised in a child thread, the child either
--   propagates the exception to its parent (see <a>fork</a>), or returns
--   the exception as a value (see <a>forkTry</a>).</li>
--   <li>All threads created within a scope are terminated when the scope
--   closes.</li>
--   </ul>
data Thread a

-- | Open a scope, perform an IO action with it, then close the scope.
--   
--   <h4><b>ðŸ‘‰ Details</b></h4>
--   
--   <ul>
--   <li>The thread that creates a scope is considered the parent of all
--   threads created within it.</li>
--   </ul>
--   
--   <ul>
--   <li>A scope is only valid during the callback provided to
--   <a>scoped</a>.</li>
--   <li>When a scope closes (<i>i.e.</i> just before <a>scoped</a>
--   returns):<ul><li>The parent thread raises an exception in all of its
--   living children.</li><li>The parent thread blocks until those threads
--   terminate.</li></ul></li>
--   </ul>
scoped :: (Scope -> IO a) -> IO a

-- | Create a child thread to execute an action within a scope.
--   
--   <i>Note</i>: The child thread does not mask asynchronous exceptions,
--   regardless of the parent thread's masking state. To create a child
--   thread with a different initial masking state, use <a>forkWith</a>.
fork :: Scope -> IO a -> IO (Thread a)

-- | Like <a>fork</a>, but the child thread does not propagate exceptions
--   that are both:
--   
--   <ul>
--   <li>Synchronous (<i>i.e.</i> not an instance of
--   <tt>SomeAsyncException</tt>).</li>
--   <li>An instance of <tt>e</tt>.</li>
--   </ul>
forkTry :: forall e a. Exception e => Scope -> IO a -> IO (Thread (Either e a))

-- | Wait for a thread to terminate.
await :: Thread a -> STM a

-- | Wait until all threads created within a scope terminate.
awaitAll :: Scope -> STM ()

-- | Variant of <a>fork</a> for threads that never return.
fork_ :: Scope -> IO Void -> IO ()

-- | Variant of <a>fork</a> that takes an additional options argument.
forkWith :: Scope -> ThreadOptions -> IO a -> IO (Thread a)

-- | Variant of <a>forkWith</a> for threads that never return.
forkWith_ :: Scope -> ThreadOptions -> IO Void -> IO ()

-- | Variant of <a>forkTry</a> that takes an additional options argument.
forkTryWith :: forall e a. Exception e => Scope -> ThreadOptions -> IO a -> IO (Thread (Either e a))

-- | <ul>
--   <li><i><tt>affinity</tt></i> The affinity of a thread. A thread can be
--   unbound, bound to a specific capability, or bound to a specific OS
--   thread.Default: <a>Unbound</a></li>
--   <li><i><tt>allocationLimit</tt></i> The maximum number of bytes a
--   thread may allocate before it is delivered an
--   <a>AllocationLimitExceeded</a> exception. If caught, the thread is
--   allowed to allocate an additional 100kb (tunable with <tt>+RTS
--   -xq</tt>) to perform any necessary cleanup actions; if exceeded, the
--   thread is delivered another.Default: <tt>Nothing</tt> (no limit)</li>
--   <li><i><tt>label</tt></i> The label of a thread, visible in the
--   <a>event log</a> (<tt>+RTS -l</tt>).Default: <tt>""</tt> (no
--   label)</li>
--   <li><i><tt>maskingState</tt></i> The masking state a thread is created
--   in. To unmask, use <a>unsafeUnmask</a>.Default: <tt>Unmasked</tt></li>
--   </ul>
data ThreadOptions
ThreadOptions :: ThreadAffinity -> Maybe ByteCount -> String -> MaskingState -> ThreadOptions
[$sel:affinity:ThreadOptions] :: ThreadOptions -> ThreadAffinity
[$sel:allocationLimit:ThreadOptions] :: ThreadOptions -> Maybe ByteCount
[$sel:label:ThreadOptions] :: ThreadOptions -> String
[$sel:maskingState:ThreadOptions] :: ThreadOptions -> MaskingState

-- | Default thread options.
--   
--   <pre>
--   <a>ThreadOptions</a>
--     { <a>affinity</a> = <a>Unbound</a>
--     , <a>allocationLimit</a> = Nothing
--     , <a>label</a> = ""
--     , <a>maskingState</a> = <a>Unmasked</a>
--     }
--   </pre>
defaultThreadOptions :: ThreadOptions

-- | What, if anything, a thread is bound to.
data ThreadAffinity

-- | Unbound.
Unbound :: ThreadAffinity

-- | Bound to a capability.
Capability :: Int -> ThreadAffinity

-- | Bound to an OS thread.
OsThread :: ThreadAffinity

-- | A number of bytes.
data ByteCount

-- | A number of kilobytes.
kilobytes :: Natural -> ByteCount

-- | A number of megabytes.
megabytes :: Natural -> ByteCount
