-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


@package unison-util-bytes
@version 0.0.0

module Unison.Util.Bytes
newtype Bytes
Bytes :: Rope Chunk -> Bytes
[$sel:underlying:Bytes] :: Bytes -> Rope Chunk
type Chunk = Vector Word8
fromByteString :: ByteString -> Bytes
toByteString :: Bytes -> ByteString
fromWord8s :: [Word8] -> Bytes
toWord8s :: Bytes -> [Word8]
fromBase16 :: Bytes -> Either Text Bytes
toBase16 :: Bytes -> Bytes
fromBase32 :: Bytes -> Either Text Bytes
toBase32 :: Bytes -> Bytes
fromBase64 :: Bytes -> Either Text Bytes
toBase64 :: Bytes -> Bytes
fromBase64UrlUnpadded :: Bytes -> Either Text Bytes
toBase64UrlUnpadded :: Bytes -> Bytes
chunkFromByteString :: ByteString -> Chunk
byteStringToChunk :: ByteString -> Chunk
chunkToByteString :: Chunk -> ByteString
fromChunks :: [Chunk] -> Bytes
chunks :: Bytes -> [Chunk]
byteStringChunks :: Bytes -> [ByteString]
toArray :: ByteArray b => Bytes -> b
fromArray :: ByteArrayAccess b => b -> Bytes
toLazyByteString :: Bytes -> ByteString
flatten :: Bytes -> Bytes
at :: Int -> Bytes -> Maybe Word8
take :: Int -> Bytes -> Bytes
drop :: Int -> Bytes -> Bytes
indexOf :: Bytes -> Bytes -> Maybe Word64
size :: Bytes -> Int
empty :: Bytes
encodeNat16be :: Word64 -> Bytes
decodeNat16be :: Bytes -> Maybe (Word64, Bytes)
encodeNat32be :: Word64 -> Bytes
decodeNat32be :: Bytes -> Maybe (Word64, Bytes)
encodeNat64be :: Word64 -> Bytes
decodeNat64be :: Bytes -> Maybe (Word64, Bytes)
encodeNat16le :: Word64 -> Bytes
decodeNat16le :: Bytes -> Maybe (Word64, Bytes)
encodeNat32le :: Word64 -> Bytes
decodeNat32le :: Bytes -> Maybe (Word64, Bytes)
encodeNat64le :: Word64 -> Bytes
decodeNat64le :: Bytes -> Maybe (Word64, Bytes)

-- | Decode a <a>ByteString</a> containing UTF-8 encoded text that is known
--   to be valid.
--   
--   If the input contains any invalid UTF-8 data, an exception will be
--   thrown that cannot be caught in pure code. For more control over the
--   handling of invalid data, use <a>decodeUtf8'</a> or
--   <a>decodeUtf8With</a>.
--   
--   This is a partial function: it checks that input is a well-formed
--   UTF-8 sequence and copies buffer or throws an error otherwise.
decodeUtf8 :: ByteString -> Text

-- | Encode text using UTF-8 encoding.
encodeUtf8 :: Text -> ByteString
zlibCompress :: Bytes -> Bytes
zlibDecompress :: Bytes -> Bytes
gzipCompress :: Bytes -> Bytes
gzipDecompress :: Bytes -> Bytes
instance GHC.Base.Monoid Unison.Util.Bytes.Bytes
instance GHC.Base.Semigroup Unison.Util.Bytes.Bytes
instance GHC.Classes.Ord Unison.Util.Bytes.Bytes
instance GHC.Classes.Eq Unison.Util.Bytes.Bytes
instance Control.DeepSeq.NFData Unison.Util.Bytes.Bytes
instance GHC.Show.Show Unison.Util.Bytes.Bytes
instance Unison.Util.Rope.Sized Unison.Util.Bytes.Chunk
instance Unison.Util.Rope.Drop Unison.Util.Bytes.Chunk
instance Unison.Util.Rope.Take Unison.Util.Bytes.Chunk
instance Unison.Util.Rope.Index Unison.Util.Bytes.Chunk GHC.Word.Word8
instance Unison.Util.Rope.Reverse Unison.Util.Bytes.Chunk
