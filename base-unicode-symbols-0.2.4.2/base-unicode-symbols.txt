-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Unicode alternatives for common functions and operators
--   
--   This package defines new symbols for a number of functions, operators
--   and types in the base package.
--   
--   All symbols are documented with their actual definition and
--   information regarding their Unicode code point. They should be
--   completely interchangeable with their definitions.
--   
--   For further Unicode goodness you can enable the <tt>UnicodeSyntax</tt>
--   language extension [1]. This extension enables Unicode characters to
--   be used to stand for certain ASCII character sequences, i.e. ‚Üí instead
--   of <tt>-&gt;</tt>, ‚àÄ instead of <tt>forall</tt> and many others.
--   
--   Original idea by P√©ter Divi√°nszky.
--   
--   [1]
--   <a>https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#unicode-syntax</a>
@package base-unicode-symbols
@version 0.2.4.2

module Control.Applicative.Unicode

-- | (‚äõ) = <a>&lt;*&gt;</a>
--   
--   U+229B, CIRCLED ASTERISK OPERATOR
(‚äõ) :: Applicative f => f (Œ± -> Œ≤) -> f Œ± -> f Œ≤
infixl 4 ‚äõ

-- | (‚àÖ) = <a>empty</a>
--   
--   U+2205, EMPTY SET
(‚àÖ) :: Alternative f => f Œ±

module Control.Category.Unicode

-- | (‚àò) = (<a>.</a>)
--   
--   U+2218, RING OPERATOR
(‚àò) :: Category c => c Œ≤ Œ≥ -> c Œ± Œ≤ -> c Œ± Œ≥
infixr 9 ‚àò

-- | (‚ãô) = (<a>&gt;&gt;&gt;</a>)
--   
--   U+22D9, VERY MUCH GREATER-THAN
(‚ãô) :: Category c => c Œ± Œ≤ -> c Œ≤ Œ≥ -> c Œ± Œ≥
infixr 1 ‚ãô

-- | (‚ãò) = (<a>&lt;&lt;&lt;</a>)
--   
--   U+22D8, VERY MUCH LESS-THAN
(‚ãò) :: Category c => c Œ≤ Œ≥ -> c Œ± Œ≤ -> c Œ± Œ≥
infixr 1 ‚ãò

module Control.Arrow.Unicode

-- | (‚ãô) = (<a>&gt;&gt;&gt;</a>)
--   
--   U+22D9, VERY MUCH GREATER-THAN
(‚ãô) :: Category c => c Œ± Œ≤ -> c Œ≤ Œ≥ -> c Œ± Œ≥
infixr 1 ‚ãô

-- | (‚ãò) = (<a>&lt;&lt;&lt;</a>)
--   
--   U+22D8, VERY MUCH LESS-THAN
(‚ãò) :: Category c => c Œ≤ Œ≥ -> c Œ± Œ≤ -> c Œ± Œ≥
infixr 1 ‚ãò

-- | (‚ÅÇ) = (<a>***</a>)
--   
--   U+2042, ASTERISM
(‚ÅÇ) :: Arrow a => a Œ± Œ≤ -> a Œ±' Œ≤' -> a (Œ±, Œ±') (Œ≤, Œ≤')
infixr 3 ‚ÅÇ

-- | (‚ßª) = (<a>+++</a>)
--   
--   U+29FB, TRIPLE PLUS
(‚ßª) :: ArrowChoice a => a Œ± Œ≤ -> a Œ±' Œ≤' -> a (Either Œ± Œ±') (Either Œ≤ Œ≤')
infixr 2 ‚ßª

-- | (‚´¥) = (<a>|||</a>)
--   
--   U+2AF4, TRIPLE VERTICAL BAR BINARY RELATION
(‚´¥) :: ArrowChoice a => a Œ± Œ¥ -> a Œ≤ Œ¥ -> a (Either Œ± Œ≤) Œ¥
infixr 2 ‚´¥

module Control.Monad.Unicode

-- | (‚â´=) = (<a>&gt;&gt;=</a>)
--   
--   (U+226B, MUCH GREATER-THAN) + (U+3D, EQUALS SIGN)
(‚â´=) :: Monad m => m Œ± -> (Œ± -> m Œ≤) -> m Œ≤
infixl 1 ‚â´=

-- | (‚â´) = (<a>&gt;&gt;</a>)
--   
--   U+226B, MUCH GREATER-THAN
(‚â´) :: Monad m => m Œ± -> m Œ≤ -> m Œ≤
infixl 1 ‚â´

-- | (=‚â™) = (<a>=&lt;&lt;</a>)
--   
--   (U+3D, EQUALS SIGN) + (U+226A, MUCH LESS-THAN)
(=‚â™) :: Monad m => (Œ± -> m Œ≤) -> m Œ± -> m Œ≤
infixr 1 =‚â™

-- | (‚Ü£) = (<a>&gt;=&gt;</a>)
--   
--   (U+21A3, RIGHTWARDS ARROW WITH TAIL)
(‚Ü£) :: Monad Œº => (Œ± -> Œº Œ≤) -> (Œ≤ -> Œº Œ≥) -> Œ± -> Œº Œ≥
infixl 1 ‚Ü£

-- | (‚Ü¢) = (<a>&lt;=&lt;</a>)
--   
--   (U+21A2, LEFTWARDS ARROW WITH TAIL)
(‚Ü¢) :: Monad Œº => (Œ≤ -> Œº Œ≥) -> (Œ± -> Œº Œ≤) -> Œ± -> Œº Œ≥
infixr 1 ‚Ü¢

module Data.Bool.Unicode

-- | (‚àß) = (<a>&amp;&amp;</a>)
--   
--   U+2227, LOGICAL AND
(‚àß) :: Bool -> Bool -> Bool
infixr 3 ‚àß

-- | (‚à®) = (<a>||</a>)
--   
--   U+2228, LOGICAL OR
(‚à®) :: Bool -> Bool -> Bool
infixr 2 ‚à®

-- | (¬¨) = <a>not</a>
--   
--   U+00AC, NOT SIGN
(¬¨) :: Bool -> Bool

-- | a ‚äª b = (a ‚à® b) ‚àß not (a ‚àß b)
--   
--   U+22BB, XOR
(‚äª) :: Bool -> Bool -> Bool
infixr 3 ‚äª

-- | a ‚äº b = not (a ‚àß b)
--   
--   U+22bc, NAND
(‚äº) :: Bool -> Bool -> Bool
infixr 3 ‚äº

-- | a ‚äΩ b = not (a ‚à® b)
--   
--   U+22bd, NOR
(‚äΩ) :: Bool -> Bool -> Bool
infixr 3 ‚äΩ

module Data.Eq.Unicode

-- | (‚â°) = (<a>==</a>)
--   
--   U+2261, IDENTICAL TO
(‚â°) :: Eq Œ± => Œ± -> Œ± -> Bool
infix 4 ‚â°

-- | (‚â¢) = (<a>/=</a>)
--   
--   U+2262, NOT IDENTICAL TO
(‚â¢) :: Eq Œ± => Œ± -> Œ± -> Bool
infix 4 ‚â¢

-- | (‚â†) = (<a>/=</a>)
--   
--   U+2260, NOT EQUAL TO
(‚â†) :: Eq Œ± => Œ± -> Œ± -> Bool
infix 4 ‚â†

module Data.Foldable.Unicode

-- | (‚àà) = <a>elem</a>
--   
--   U+2208, ELEMENT OF
(‚àà) :: (Foldable t, Eq Œ±) => Œ± -> t Œ± -> Bool
infix 4 ‚àà

-- | (‚àã) = <a>flip</a> (‚àà)
--   
--   U+220B, CONTAINS AS MEMBER
(‚àã) :: (Foldable t, Eq Œ±) => t Œ± -> Œ± -> Bool
infix 4 ‚àã

-- | (‚àâ) = <a>notElem</a>
--   
--   U+2209, NOT AN ELEMENT OF
(‚àâ) :: (Foldable t, Eq Œ±) => Œ± -> t Œ± -> Bool
infix 4 ‚àâ

-- | (‚àå) = <a>flip</a> (‚àâ)
--   
--   U+220C, DOES NOT CONTAIN AS MEMBER
(‚àå) :: (Foldable t, Eq Œ±) => t Œ± -> Œ± -> Bool
infix 4 ‚àå

module Data.Function.Unicode

-- | (‚àò) = (<a>.</a>)
--   
--   U+2218, RING OPERATOR
(‚àò) :: (Œ≤ -> Œ≥) -> (Œ± -> Œ≤) -> Œ± -> Œ≥
infixr 9 ‚àò

module Data.List.Unicode

-- | (‚ß∫) = (<a>++</a>)
--   
--   U+29FA, DOUBLE PLUS
(‚ß∫) :: [Œ±] -> [Œ±] -> [Œ±]
infixr 5 ‚ß∫

-- | (‚àà) = <a>elem</a>
--   
--   U+2208, ELEMENT OF
(‚àà) :: Eq Œ± => Œ± -> [Œ±] -> Bool
infix 4 ‚àà

-- | (‚àã) = <a>flip</a> (‚àà)
--   
--   U+220B, CONTAINS AS MEMBER
(‚àã) :: Eq Œ± => [Œ±] -> Œ± -> Bool
infix 4 ‚àã

-- | (‚àâ) = <a>notElem</a>
--   
--   U+2209, NOT AN ELEMENT OF
(‚àâ) :: Eq Œ± => Œ± -> [Œ±] -> Bool
infix 4 ‚àâ

-- | (‚àå) = <a>flip</a> (‚àâ)
--   
--   U+220C, DOES NOT CONTAIN AS MEMBER
(‚àå) :: Eq Œ± => [Œ±] -> Œ± -> Bool
infix 4 ‚àå

-- | (‚à™) = <a>union</a>
--   
--   U+222A, UNION
(‚à™) :: Eq Œ± => [Œ±] -> [Œ±] -> [Œ±]
infixl 6 ‚à™

-- | (‚àñ) = (<a>\\</a>)
--   
--   U+2216, SET MINUS
(‚àñ) :: Eq Œ± => [Œ±] -> [Œ±] -> [Œ±]
infixl 9 ‚àñ

-- | Symmetric difference
--   
--   a ‚àÜ b = (a ‚àñ b) ‚à™ (b ‚àñ a)
--   
--   U+2206, INCREMENT
(‚àÜ) :: Eq Œ± => [Œ±] -> [Œ±] -> [Œ±]
infixl 9 ‚àÜ

-- | (‚à©) = <a>intersect</a>
--   
--   U+2229, INTERSECTION
(‚à©) :: Eq Œ± => [Œ±] -> [Œ±] -> [Œ±]
infixr 6 ‚à©

-- | (‚Äº) = (<a>!!</a>)
--   
--   U+203C, DOUBLE EXCLAMATION MARK
(‚Äº) :: [Œ±] -> Int -> Œ±
infixl 9 ‚Äº

-- | Epsilon, the empty word (or list)
--   
--   (Œµ) = []
--   
--   (U+3B5, GREEK SMALL LETTER EPSILON)
ùúÄ :: [a]

module Data.Monoid.Unicode

-- | (‚àÖ) = <a>mempty</a>
--   
--   U+2205, EMPTY SET
(‚àÖ) :: Monoid Œ± => Œ±

-- | (‚äï) = <a>mappend</a>
--   
--   U+2295, CIRCLED PLUS
(‚äï) :: Monoid Œ± => Œ± -> Œ± -> Œ±
infixr 6 ‚äï

module Data.Ord.Unicode

-- | (‚â§) = (<a>&lt;=</a>)
--   
--   U+2264, LESS-THAN OR EQUAL TO
(‚â§) :: Ord Œ± => Œ± -> Œ± -> Bool
infix 4 ‚â§

-- | (‚â•) = (<a>&gt;=</a>)
--   
--   U+2265, GREATER-THAN OR EQUAL TO
(‚â•) :: Ord Œ± => Œ± -> Œ± -> Bool
infix 4 ‚â•

-- | (‚âÆ) = (<a>&gt;=</a>)
--   
--   U+226E, NOT LESS-THAN
(‚âÆ) :: Ord Œ± => Œ± -> Œ± -> Bool
infix 4 ‚âÆ

-- | (‚âØ) = (<a>&lt;=</a>)
--   
--   U+226F, NOT GREATER-THAN
(‚âØ) :: Ord Œ± => Œ± -> Œ± -> Bool
infix 4 ‚âØ

module Data.String.Unicode

-- | Epsilon, the empty word (or list)
--   
--   (Œµ) = []
--   
--   (U+3B5, GREEK SMALL LETTER EPSILON)
ùúÄ :: [a]

module Numeric.Natural.Unicode

-- | U+2115, DOUBLE-STRUCK CAPITAL N
type ‚Ñï = Natural

module Prelude.Unicode

-- | (¬¨) = <a>not</a>
--   
--   U+00AC, NOT SIGN
(¬¨) :: Bool -> Bool

-- | (‚àß) = (<a>&amp;&amp;</a>)
--   
--   U+2227, LOGICAL AND
(‚àß) :: Bool -> Bool -> Bool
infixr 3 ‚àß

-- | (‚à®) = (<a>||</a>)
--   
--   U+2228, LOGICAL OR
(‚à®) :: Bool -> Bool -> Bool
infixr 2 ‚à®

-- | (‚â°) = (<a>==</a>)
--   
--   U+2261, IDENTICAL TO
(‚â°) :: Eq Œ± => Œ± -> Œ± -> Bool
infix 4 ‚â°

-- | (‚â¢) = (<a>/=</a>)
--   
--   U+2262, NOT IDENTICAL TO
(‚â¢) :: Eq Œ± => Œ± -> Œ± -> Bool
infix 4 ‚â¢

-- | (‚â†) = (<a>/=</a>)
--   
--   U+2260, NOT EQUAL TO
(‚â†) :: Eq Œ± => Œ± -> Œ± -> Bool
infix 4 ‚â†

-- | (‚â§) = (<a>&lt;=</a>)
--   
--   U+2264, LESS-THAN OR EQUAL TO
(‚â§) :: Ord Œ± => Œ± -> Œ± -> Bool
infix 4 ‚â§

-- | (‚â•) = (<a>&gt;=</a>)
--   
--   U+2265, GREATER-THAN OR EQUAL TO
(‚â•) :: Ord Œ± => Œ± -> Œ± -> Bool
infix 4 ‚â•

-- | (‚âÆ) = (<a>&gt;=</a>)
--   
--   U+226E, NOT LESS-THAN
(‚âÆ) :: Ord Œ± => Œ± -> Œ± -> Bool
infix 4 ‚âÆ

-- | (‚âØ) = (<a>&lt;=</a>)
--   
--   U+226F, NOT GREATER-THAN
(‚âØ) :: Ord Œ± => Œ± -> Œ± -> Bool
infix 4 ‚âØ

-- | a ‚àí b = a - b
--   
--   U+2212, MINUS SIGN
(‚àí) :: Num a => a -> a -> a
infixl 6 ‚àí

-- | œÄ = <a>pi</a>
--   
--   U+03C0, GREEK SMALL LETTER PI
œÄ :: Floating Œ± => Œ±

-- | (√∑) = (<a>/</a>)
--   
--   U+00F7, DIVISION SIGN
(√∑) :: Fractional Œ± => Œ± -> Œ± -> Œ±
infixl 7 √∑

-- | (√ó) = (<a>*</a>)
--   
--   U+00D7, MULTIPLICATION SIGN
(√ó) :: Num Œ± => Œ± -> Œ± -> Œ±
infixl 7 √ó

-- | (‚ãÖ) = (<a>*</a>)
--   
--   U+22C5, DOT OPERATOR
(‚ãÖ) :: Num Œ± => Œ± -> Œ± -> Œ±
infixl 7 ‚ãÖ

-- | (‚àò) = (<a>.</a>)
--   
--   U+2218, RING OPERATOR
(‚àò) :: (Œ≤ -> Œ≥) -> (Œ± -> Œ≤) -> Œ± -> Œ≥
infixr 9 ‚àò

-- | (‚ß∫) = (<a>++</a>)
--   
--   U+29FA, DOUBLE PLUS
(‚ß∫) :: [Œ±] -> [Œ±] -> [Œ±]
infixr 5 ‚ß∫

-- | (‚àà) = <a>elem</a>
--   
--   U+2208, ELEMENT OF
(‚àà) :: Eq Œ± => Œ± -> [Œ±] -> Bool
infix 4 ‚àà

-- | (‚àâ) = <a>notElem</a>
--   
--   U+2209, NOT AN ELEMENT OF
(‚àâ) :: Eq Œ± => Œ± -> [Œ±] -> Bool
infix 4 ‚àâ

-- | (‚Äº) = (<a>!!</a>)
--   
--   U+203C, DOUBLE EXCLAMATION MARK
(‚Äº) :: [Œ±] -> Int -> Œ±
infixl 9 ‚Äº

-- | (‚ä•) = <a>undefined</a>
--   
--   U+22A5, UP TACK
(‚ä•) :: Œ±

-- | a ‚à£ b = mod a b == 0
--   
--   U+2223, DIVIDES
(‚à£) :: Integral a => a -> a -> Bool
infix 4 ‚à£

-- | a ‚à§ b = not (a ‚à£ b)
--   
--   U+2224, DOES NOT DIVIDE
(‚à§) :: Integral a => a -> a -> Bool
infix 4 ‚à§

-- | U+2124, DOUBLE-STRUCK CAPITAL Z
type ‚Ñ§ = Integer

-- | U+2124, DOUBLE-STRUCK CAPITAL Q
type ‚Ñö = Ratio ‚Ñ§

-- | Epsilon, the empty word (or list)
--   
--   (Œµ) = []
--   
--   (U+3B5, GREEK SMALL LETTER EPSILON)
ùúÄ :: [a]
