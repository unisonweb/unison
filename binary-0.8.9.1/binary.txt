-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Binary serialisation for Haskell values using lazy ByteStrings
--   
--   Efficient, pure binary serialisation using lazy ByteStrings. Haskell
--   values may be encoded to and from binary formats, written to disk as
--   binary, or sent over the network. The format used can be automatically
--   generated, or you can choose to implement a custom format if needed.
--   Serialisation speeds of over 1 G/sec have been observed, so this
--   library should be suitable for high performance scenarios.
@package binary
@version 0.8.9.1


-- | Efficient constructions of lazy bytestrings.
--   
--   This now re-exports <a>Builder</a>.
module Data.Binary.Builder

-- | <a>Builder</a>s denote sequences of bytes. They are <a>Monoid</a>s
--   where <a>mempty</a> is the zero-length sequence and <a>mappend</a> is
--   concatenation, which runs in <i>O(1)</i>.
data () => Builder

-- | Execute a <a>Builder</a> and return the generated chunks as a lazy
--   <a>ByteString</a>. The work is performed lazy, i.e., only when a chunk
--   of the lazy <a>ByteString</a> is forced.
toLazyByteString :: Builder -> ByteString

-- | <i>O(1).</i> The empty Builder, satisfying
--   
--   <ul>
--   <li><pre><a>toLazyByteString</a> <a>empty</a> =
--   <a>empty</a></pre></li>
--   </ul>
empty :: Builder

-- | <i>O(1).</i> A Builder taking a single byte, satisfying
--   
--   <ul>
--   <li><pre><a>toLazyByteString</a> (<a>singleton</a> b) =
--   <a>singleton</a> b</pre></li>
--   </ul>
singleton :: Word8 -> Builder

-- | <i>O(1).</i> The concatenation of two Builders, an associative
--   operation with identity <a>empty</a>, satisfying
--   
--   <ul>
--   <li><pre><a>toLazyByteString</a> (<a>append</a> x y) = <a>append</a>
--   (<a>toLazyByteString</a> x) (<a>toLazyByteString</a> y)</pre></li>
--   </ul>
append :: Builder -> Builder -> Builder

-- | <i>O(1).</i> A Builder taking a <a>ByteString</a>, satisfying
--   
--   <ul>
--   <li><pre><a>toLazyByteString</a> (<a>fromByteString</a> bs) =
--   <a>fromChunks</a> [bs]</pre></li>
--   </ul>
fromByteString :: ByteString -> Builder

-- | <i>O(1).</i> A Builder taking a lazy <a>ByteString</a>, satisfying
--   
--   <ul>
--   <li><pre><a>toLazyByteString</a> (<a>fromLazyByteString</a> bs) =
--   bs</pre></li>
--   </ul>
fromLazyByteString :: ByteString -> Builder

-- | <i>O(n).</i> A builder taking <a>ShortByteString</a> and copy it to a
--   Builder, satisfying
--   
--   <ul>
--   <li>@<a>toLazyByteString</a> (<a>fromShortByteString</a> bs) =
--   <a>fromChunks</a> [<a>fromShort</a> bs]</li>
--   </ul>
fromShortByteString :: ShortByteString -> Builder

-- | Flush the current buffer. This introduces a chunk boundary.
flush :: Builder

-- | Write a Word16 in big endian format
putWord16be :: Word16 -> Builder

-- | Write a Word32 in big endian format
putWord32be :: Word32 -> Builder

-- | Write a Word64 in big endian format
putWord64be :: Word64 -> Builder

-- | Write a Int16 in big endian format
putInt16be :: Int16 -> Builder

-- | Write a Int32 in big endian format
putInt32be :: Int32 -> Builder

-- | Write a Int64 in big endian format
putInt64be :: Int64 -> Builder

-- | Write a Word16 in little endian format
putWord16le :: Word16 -> Builder

-- | Write a Word32 in little endian format
putWord32le :: Word32 -> Builder

-- | Write a Word64 in little endian format
putWord64le :: Word64 -> Builder

-- | Write a Int16 in little endian format
putInt16le :: Int16 -> Builder

-- | Write a Int32 in little endian format
putInt32le :: Int32 -> Builder

-- | Write a Int64 in little endian format
putInt64le :: Int64 -> Builder

-- | <i>O(1).</i> A Builder taking a single native machine word. The word
--   is written in host order, host endian form, for the machine you're on.
--   On a 64 bit machine the Word is an 8 byte value, on a 32 bit machine,
--   4 bytes. Values written this way are not portable to different endian
--   or word sized machines, without conversion.
putWordhost :: Word -> Builder

-- | Write a Word16 in native host order and host endianness. 2 bytes will
--   be written, unaligned.
putWord16host :: Word16 -> Builder

-- | Write a Word32 in native host order and host endianness. 4 bytes will
--   be written, unaligned.
putWord32host :: Word32 -> Builder

-- | Write a Word64 in native host order. On a 32 bit machine we write two
--   host order Word32s, in big endian form. 8 bytes will be written,
--   unaligned.
putWord64host :: Word64 -> Builder

-- | <i>O(1).</i> A Builder taking a single native machine word. The word
--   is written in host order, host endian form, for the machine you're on.
--   On a 64 bit machine the Int is an 8 byte value, on a 32 bit machine, 4
--   bytes. Values written this way are not portable to different endian or
--   word sized machines, without conversion.
putInthost :: Int -> Builder

-- | Write a Int16 in native host order and host endianness. 2 bytes will
--   be written, unaligned.
putInt16host :: Int16 -> Builder

-- | Write a Int32 in native host order and host endianness. 4 bytes will
--   be written, unaligned.
putInt32host :: Int32 -> Builder

-- | Write a Int64 in native host order. On a 32 bit machine we write two
--   host order Int32s, in big endian form. 8 bytes will be written,
--   unaligned.
putInt64host :: Int64 -> Builder

-- | Write a character using UTF-8 encoding.
putCharUtf8 :: Char -> Builder

-- | Write a String using UTF-8 encoding.
putStringUtf8 :: String -> Builder

module Data.Binary.Get.Internal
data Get a
runCont :: Get a -> forall r. ByteString -> Success a r -> Decoder r

-- | A decoder produced by running a <a>Get</a> monad.
data Decoder a

-- | The decoder ran into an error. The decoder either used <a>fail</a> or
--   was not provided enough input.
Fail :: !ByteString -> String -> Decoder a

-- | The decoder has consumed the available input and needs more to
--   continue. Provide <a>Just</a> if more input is available and
--   <a>Nothing</a> otherwise, and you will get a new <a>Decoder</a>.
Partial :: (Maybe ByteString -> Decoder a) -> Decoder a

-- | The decoder has successfully finished. Except for the output value you
--   also get the unused input.
Done :: !ByteString -> a -> Decoder a

-- | The decoder needs to know the current position in the input. Given the
--   number of bytes remaning in the decoder, the outer decoder runner
--   needs to calculate the position and resume the decoding.
BytesRead :: {-# UNPACK #-} !Int64 -> (Int64 -> Decoder a) -> Decoder a

-- | Run a <a>Get</a> monad. See <a>Decoder</a> for what to do next, like
--   providing input, handling decoding errors and to get the output value.
runGetIncremental :: Get a -> Decoder a

-- | Return at least <tt>n</tt> bytes, maybe more. If not enough data is
--   available the computation will escape with <a>Partial</a>.
readN :: Int -> (ByteString -> a) -> Get a

-- | <tt>readNWith n f</tt> where <tt>f</tt> must be deterministic and not
--   have side effects.
readNWith :: Int -> (Ptr a -> IO a) -> Get a

-- | Get the total number of bytes read to this point.
bytesRead :: Get Int64

-- | Isolate a decoder to operate with a fixed number of bytes, and fail if
--   fewer bytes were consumed, or more bytes were attempted to be
--   consumed. If the given decoder fails, <a>isolate</a> will also fail.
--   Offset from <a>bytesRead</a> will be relative to the start of
--   <a>isolate</a>, not the absolute of the input.
isolate :: Int -> Get a -> Get a
withInputChunks :: s -> Consume s -> ([ByteString] -> b) -> ([ByteString] -> Get b) -> Get b
type Consume s = s -> ByteString -> Either s (ByteString, ByteString)
failOnEOF :: [ByteString] -> Get a

-- | Get the current chunk.
get :: Get ByteString

-- | Replace the current chunk.
put :: ByteString -> Get ()

-- | Ensure that there are at least <tt>n</tt> bytes available. If not, the
--   computation will escape with <a>Partial</a>.
ensureN :: Int -> Get ()

-- | DEPRECATED. Get the number of bytes of remaining input. Note that this
--   is an expensive function to use as in order to calculate how much
--   input remains, all input has to be read and kept in-memory. The
--   decoder keeps the input as a strict bytestring, so you are likely
--   better off by calculating the remaining input in another way.

-- | <i>Deprecated: This will force all remaining input, don't use it.</i>
remaining :: Get Int64

-- | DEPRECATED. Same as <a>getByteString</a>.

-- | <i>Deprecated: Use <a>getByteString</a> instead of
--   <a>getBytes</a>.</i>
getBytes :: Int -> Get ByteString

-- | Test whether all input has been consumed, i.e. there are no remaining
--   undecoded bytes.
isEmpty :: Get Bool

-- | Run the given decoder, but without consuming its input. If the given
--   decoder fails, then so will this function.
lookAhead :: Get a -> Get a

-- | Run the given decoder, and only consume its input if it returns
--   <a>Just</a>. If <a>Nothing</a> is returned, the input will be
--   unconsumed. If the given decoder fails, then so will this function.
lookAheadM :: Get (Maybe a) -> Get (Maybe a)

-- | Run the given decoder, and only consume its input if it returns
--   <a>Right</a>. If <a>Left</a> is returned, the input will be
--   unconsumed. If the given decoder fails, then so will this function.
lookAheadE :: Get (Either a b) -> Get (Either a b)

-- | Label a decoder. If the decoder fails, the label will be appended on a
--   new line to the error message string.
label :: String -> Get a -> Get a

-- | An efficient get method for strict ByteStrings. Fails if fewer than
--   <tt>n</tt> bytes are left in the input. If <tt>n &lt;= 0</tt> then the
--   empty string is returned.
getByteString :: Int -> Get ByteString
instance GHC.Base.Monad Data.Binary.Get.Internal.Get
instance Control.Monad.Fail.MonadFail Data.Binary.Get.Internal.Get
instance GHC.Base.Applicative Data.Binary.Get.Internal.Get
instance GHC.Base.MonadPlus Data.Binary.Get.Internal.Get
instance GHC.Base.Functor Data.Binary.Get.Internal.Get
instance GHC.Base.Alternative Data.Binary.Get.Internal.Get
instance GHC.Base.Functor Data.Binary.Get.Internal.Decoder
instance GHC.Show.Show a => GHC.Show.Show (Data.Binary.Get.Internal.Decoder a)


-- | The <a>Get</a> monad. A monad for efficiently building structures from
--   encoded lazy ByteStrings.
--   
--   Primitives are available to decode words of various sizes, both big
--   and little endian.
--   
--   Let's decode binary data representing illustrated here. In this
--   example the values are in little endian.
--   
--   <pre>
--   +------------------+--------------+-----------------+
--   | 32 bit timestamp | 32 bit price | 16 bit quantity |
--   +------------------+--------------+-----------------+
--   </pre>
--   
--   A corresponding Haskell value looks like this:
--   
--   <pre>
--   data Trade = Trade
--     { timestamp :: !<a>Word32</a>
--     , price     :: !<a>Word32</a>
--     , qty       :: !<a>Word16</a>
--     } deriving (<a>Show</a>)
--    
--   </pre>
--   
--   The fields in <tt>Trade</tt> are marked as strict (using <tt>!</tt>)
--   since we don't need laziness here. In practise, you would probably
--   consider using the UNPACK pragma as well.
--   <a>https://downloads.haskell.org/~ghc/latest/docs/html/users_guide/glasgow_exts.html#unpack-pragma</a>
--   
--   Now, let's have a look at a decoder for this format.
--   
--   <pre>
--   getTrade :: <a>Get</a> Trade
--   getTrade = do
--     timestamp &lt;- <a>getWord32le</a>
--     price     &lt;- <a>getWord32le</a>
--     quantity  &lt;- <a>getWord16le</a>
--     return <a>$!</a> Trade timestamp price quantity
--    
--   </pre>
--   
--   Or even simpler using applicative style:
--   
--   <pre>
--   getTrade' :: <a>Get</a> Trade
--   getTrade' = Trade <a>&lt;$&gt;</a> <a>getWord32le</a> <a>&lt;*&gt;</a> <a>getWord32le</a> <a>&lt;*&gt;</a> <a>getWord16le</a>
--    
--   </pre>
--   
--   There are two kinds of ways to execute this decoder, the lazy input
--   method and the incremental input method. Here we will use the lazy
--   input method.
--   
--   Let's first define a function that decodes many <tt>Trade</tt>s.
--   
--   <pre>
--   getTrades :: Get [Trade]
--   getTrades = do
--     empty &lt;- <a>isEmpty</a>
--     if empty
--       then return []
--       else do trade &lt;- getTrade
--               trades &lt;- getTrades
--               return (trade:trades)
--    
--   </pre>
--   
--   Finally, we run the decoder:
--   
--   <pre>
--   lazyIOExample :: IO [Trade]
--   lazyIOExample = do
--     input &lt;- BL.readFile "trades.bin"
--     return (<a>runGet</a> getTrades input)
--    
--   </pre>
--   
--   This decoder has the downside that it will need to read all the input
--   before it can return. On the other hand, it will not return anything
--   until it knows it could decode without any decoder errors.
--   
--   You could also refactor to a left-fold, to decode in a more streaming
--   fashion, and get the following decoder. It will start to return data
--   without knowing that it can decode all input.
--   
--   <pre>
--   incrementalExample :: BL.ByteString -&gt; [Trade]
--   incrementalExample input0 = go decoder input0
--     where
--       decoder = <a>runGetIncremental</a> getTrade
--       go :: <a>Decoder</a> Trade -&gt; BL.ByteString -&gt; [Trade]
--       go (<a>Done</a> leftover _consumed trade) input =
--         trade : go decoder (BL.chunk leftover input)
--       go (<a>Partial</a> k) input                     =
--         go (k . takeHeadChunk $ input) (dropHeadChunk input)
--       go (<a>Fail</a> _leftover _consumed msg) _input =
--         error msg
--   
--   takeHeadChunk :: BL.ByteString -&gt; Maybe BS.ByteString
--   takeHeadChunk lbs =
--     case lbs of
--       (BL.Chunk bs _) -&gt; Just bs
--       _ -&gt; Nothing
--   
--   dropHeadChunk :: BL.ByteString -&gt; BL.ByteString
--   dropHeadChunk lbs =
--     case lbs of
--       (BL.Chunk _ lbs') -&gt; lbs'
--       _ -&gt; BL.Empty
--    
--   </pre>
--   
--   The <tt>lazyIOExample</tt> uses lazy I/O to read the file from the
--   disk, which is not suitable in all applications, and certainly not if
--   you need to read from a socket which has higher likelihood to fail. To
--   address these needs, use the incremental input method like in
--   <tt>incrementalExample</tt>. For an example of how to read
--   incrementally from a Handle, see the implementation of
--   <a>decodeFileOrFail</a>.
module Data.Binary.Get
data Get a

-- | The simplest interface to run a <a>Get</a> decoder. If the decoder
--   runs into an error, calls <a>fail</a>, or runs out of input, it will
--   call <a>error</a>.
runGet :: Get a -> ByteString -> a

-- | Run a <a>Get</a> monad and return <a>Left</a> on failure and
--   <a>Right</a> on success. In both cases any unconsumed input and the
--   number of bytes consumed is returned. In the case of failure, a
--   human-readable error message is included as well.
runGetOrFail :: Get a -> ByteString -> Either (ByteString, ByteOffset, String) (ByteString, ByteOffset, a)

-- | An offset, counted in bytes.
type ByteOffset = Int64

-- | A decoder procuced by running a <a>Get</a> monad.
data Decoder a

-- | The decoder ran into an error. The decoder either used <a>fail</a> or
--   was not provided enough input. Contains any unconsumed input and the
--   number of bytes consumed.
Fail :: !ByteString -> {-# UNPACK #-} !ByteOffset -> String -> Decoder a

-- | The decoder has consumed the available input and needs more to
--   continue. Provide <a>Just</a> if more input is available and
--   <a>Nothing</a> otherwise, and you will get a new <a>Decoder</a>.
Partial :: (Maybe ByteString -> Decoder a) -> Decoder a

-- | The decoder has successfully finished. Except for the output value you
--   also get any unused input as well as the number of bytes consumed.
Done :: !ByteString -> {-# UNPACK #-} !ByteOffset -> a -> Decoder a

-- | Run a <a>Get</a> monad. See <a>Decoder</a> for what to do next, like
--   providing input, handling decoder errors and to get the output value.
--   Hint: Use the helper functions <a>pushChunk</a>, <a>pushChunks</a> and
--   <a>pushEndOfInput</a>.
runGetIncremental :: Get a -> Decoder a

-- | Feed a <a>Decoder</a> with more input. If the <a>Decoder</a> is
--   <a>Done</a> or <a>Fail</a> it will add the input to <a>ByteString</a>
--   of unconsumed input.
--   
--   <pre>
--   <a>runGetIncremental</a> myParser `pushChunk` myInput1 `pushChunk` myInput2
--   </pre>
pushChunk :: Decoder a -> ByteString -> Decoder a

-- | Feed a <a>Decoder</a> with more input. If the <a>Decoder</a> is
--   <a>Done</a> or <a>Fail</a> it will add the input to <a>ByteString</a>
--   of unconsumed input.
--   
--   <pre>
--   <a>runGetIncremental</a> myParser `pushChunks` myLazyByteString
--   </pre>
pushChunks :: Decoder a -> ByteString -> Decoder a

-- | Tell a <a>Decoder</a> that there is no more input. This passes
--   <a>Nothing</a> to a <a>Partial</a> decoder, otherwise returns the
--   decoder unchanged.
pushEndOfInput :: Decoder a -> Decoder a

-- | Skip ahead <tt>n</tt> bytes. Fails if fewer than <tt>n</tt> bytes are
--   available.
skip :: Int -> Get ()

-- | Test whether all input has been consumed, i.e. there are no remaining
--   undecoded bytes.
isEmpty :: Get Bool

-- | Get the total number of bytes read to this point.
bytesRead :: Get Int64

-- | Isolate a decoder to operate with a fixed number of bytes, and fail if
--   fewer bytes were consumed, or more bytes were attempted to be
--   consumed. If the given decoder fails, <a>isolate</a> will also fail.
--   Offset from <a>bytesRead</a> will be relative to the start of
--   <a>isolate</a>, not the absolute of the input.
isolate :: Int -> Get a -> Get a

-- | Run the given decoder, but without consuming its input. If the given
--   decoder fails, then so will this function.
lookAhead :: Get a -> Get a

-- | Run the given decoder, and only consume its input if it returns
--   <a>Just</a>. If <a>Nothing</a> is returned, the input will be
--   unconsumed. If the given decoder fails, then so will this function.
lookAheadM :: Get (Maybe a) -> Get (Maybe a)

-- | Run the given decoder, and only consume its input if it returns
--   <a>Right</a>. If <a>Left</a> is returned, the input will be
--   unconsumed. If the given decoder fails, then so will this function.
lookAheadE :: Get (Either a b) -> Get (Either a b)

-- | Label a decoder. If the decoder fails, the label will be appended on a
--   new line to the error message string.
label :: String -> Get a -> Get a

-- | An efficient get method for strict ByteStrings. Fails if fewer than
--   <tt>n</tt> bytes are left in the input. If <tt>n &lt;= 0</tt> then the
--   empty string is returned.
getByteString :: Int -> Get ByteString

-- | An efficient get method for lazy ByteStrings. Fails if fewer than
--   <tt>n</tt> bytes are left in the input.
getLazyByteString :: Int64 -> Get ByteString

-- | Get a lazy ByteString that is terminated with a NUL byte. The returned
--   string does not contain the NUL byte. Fails if it reaches the end of
--   input without finding a NUL.
getLazyByteStringNul :: Get ByteString

-- | Get the remaining bytes as a lazy ByteString. Note that this can be an
--   expensive function to use as it forces reading all input and keeping
--   the string in-memory.
getRemainingLazyByteString :: Get ByteString

-- | Read a Word8 from the monad state
getWord8 :: Get Word8

-- | Read a Word16 in big endian format
getWord16be :: Get Word16

-- | Read a Word32 in big endian format
getWord32be :: Get Word32

-- | Read a Word64 in big endian format
getWord64be :: Get Word64

-- | Read a Word16 in little endian format
getWord16le :: Get Word16

-- | Read a Word32 in little endian format
getWord32le :: Get Word32

-- | Read a Word64 in little endian format
getWord64le :: Get Word64

-- | <i>O(1).</i> Read a single native machine word. The word is read in
--   host order, host endian form, for the machine you're on. On a 64 bit
--   machine the Word is an 8 byte value, on a 32 bit machine, 4 bytes.
getWordhost :: Get Word

-- | <i>O(1).</i> Read a 2 byte Word16 in native host order and host
--   endianness.
getWord16host :: Get Word16

-- | <i>O(1).</i> Read a Word32 in native host order and host endianness.
getWord32host :: Get Word32

-- | <i>O(1).</i> Read a Word64 in native host order and host endianess.
getWord64host :: Get Word64

-- | Read an Int8 from the monad state
getInt8 :: Get Int8

-- | Read an Int16 in big endian format.
getInt16be :: Get Int16

-- | Read an Int32 in big endian format.
getInt32be :: Get Int32

-- | Read an Int64 in big endian format.
getInt64be :: Get Int64

-- | Read an Int16 in little endian format.
getInt16le :: Get Int16

-- | Read an Int32 in little endian format.
getInt32le :: Get Int32

-- | Read an Int64 in little endian format.
getInt64le :: Get Int64

-- | <i>O(1).</i> Read a single native machine word in native host order.
--   It works in the same way as <a>getWordhost</a>.
getInthost :: Get Int

-- | <i>O(1).</i> Read a 2 byte Int16 in native host order and host
--   endianness.
getInt16host :: Get Int16

-- | <i>O(1).</i> Read an Int32 in native host order and host endianness.
getInt32host :: Get Int32

-- | <i>O(1).</i> Read an Int64 in native host order and host endianess.
getInt64host :: Get Int64

-- | Read a <a>Float</a> in big endian IEEE-754 format.
getFloatbe :: Get Float

-- | Read a <a>Float</a> in little endian IEEE-754 format.
getFloatle :: Get Float

-- | Read a <a>Float</a> in IEEE-754 format and host endian.
getFloathost :: Get Float

-- | Read a <a>Double</a> in big endian IEEE-754 format.
getDoublebe :: Get Double

-- | Read a <a>Double</a> in little endian IEEE-754 format.
getDoublele :: Get Double

-- | Read a <a>Double</a> in IEEE-754 format and host endian.
getDoublehost :: Get Double

-- | DEPRECATED. Provides compatibility with previous versions of this
--   library. Run a <a>Get</a> monad and return a tuple with three values.
--   The first value is the result of the decoder. The second and third are
--   the unused input, and the number of consumed bytes.

-- | <i>Deprecated: Use runGetIncremental instead. This function will be
--   removed.</i>
runGetState :: Get a -> ByteString -> ByteOffset -> (a, ByteString, ByteOffset)

-- | DEPRECATED. Get the number of bytes of remaining input. Note that this
--   is an expensive function to use as in order to calculate how much
--   input remains, all input has to be read and kept in-memory. The
--   decoder keeps the input as a strict bytestring, so you are likely
--   better off by calculating the remaining input in another way.

-- | <i>Deprecated: This will force all remaining input, don't use it.</i>
remaining :: Get Int64

-- | DEPRECATED. Same as <a>getByteString</a>.

-- | <i>Deprecated: Use <a>getByteString</a> instead of
--   <a>getBytes</a>.</i>
getBytes :: Int -> Get ByteString


-- | The Put monad. A monad for efficiently constructing lazy bytestrings.
module Data.Binary.Put

-- | Put merely lifts Builder into a Writer monad, applied to ().
type Put = PutM ()

-- | The PutM type. A Writer monad over the efficient Builder monoid.
newtype PutM a
Put :: PairS a -> PutM a
[unPut] :: PutM a -> PairS a

-- | Run the <a>PutM</a> monad with a serialiser
runPut :: Put -> ByteString

-- | Run the <a>PutM</a> monad with a serialiser and get its result
runPutM :: PutM a -> (a, ByteString)
putBuilder :: Builder -> Put

-- | Run the <a>PutM</a> monad
execPut :: PutM a -> Builder

-- | Pop the ByteString we have constructed so far, if any, yielding a new
--   chunk in the result ByteString.
flush :: Put

-- | Efficiently write a byte into the output buffer
putWord8 :: Word8 -> Put

-- | Efficiently write a signed byte into the output buffer
putInt8 :: Int8 -> Put

-- | An efficient primitive to write a strict ByteString into the output
--   buffer. It flushes the current buffer, and writes the argument into a
--   new chunk.
putByteString :: ByteString -> Put

-- | Write a lazy ByteString efficiently, simply appending the lazy
--   ByteString chunks to the output buffer
putLazyByteString :: ByteString -> Put

-- | Write <a>ShortByteString</a> to the buffer
putShortByteString :: ShortByteString -> Put

-- | Write a Word16 in big endian format
putWord16be :: Word16 -> Put

-- | Write a Word32 in big endian format
putWord32be :: Word32 -> Put

-- | Write a Word64 in big endian format
putWord64be :: Word64 -> Put

-- | Write an Int16 in big endian format
putInt16be :: Int16 -> Put

-- | Write an Int32 in big endian format
putInt32be :: Int32 -> Put

-- | Write an Int64 in big endian format
putInt64be :: Int64 -> Put

-- | Write a <a>Float</a> in big endian IEEE-754 format.
putFloatbe :: Float -> Put

-- | Write a <a>Double</a> in big endian IEEE-754 format.
putDoublebe :: Double -> Put

-- | Write a Word16 in little endian format
putWord16le :: Word16 -> Put

-- | Write a Word32 in little endian format
putWord32le :: Word32 -> Put

-- | Write a Word64 in little endian format
putWord64le :: Word64 -> Put

-- | Write an Int16 in little endian format
putInt16le :: Int16 -> Put

-- | Write an Int32 in little endian format
putInt32le :: Int32 -> Put

-- | Write an Int64 in little endian format
putInt64le :: Int64 -> Put

-- | Write a <a>Float</a> in little endian IEEE-754 format.
putFloatle :: Float -> Put

-- | Write a <a>Double</a> in little endian IEEE-754 format.
putDoublele :: Double -> Put

-- | <i>O(1).</i> Write a single native machine word. The word is written
--   in host order, host endian form, for the machine you're on. On a 64
--   bit machine the Word is an 8 byte value, on a 32 bit machine, 4 bytes.
--   Values written this way are not portable to different endian or word
--   sized machines, without conversion.
putWordhost :: Word -> Put

-- | <i>O(1).</i> Write a Word16 in native host order and host endianness.
--   For portability issues see <tt>putWordhost</tt>.
putWord16host :: Word16 -> Put

-- | <i>O(1).</i> Write a Word32 in native host order and host endianness.
--   For portability issues see <tt>putWordhost</tt>.
putWord32host :: Word32 -> Put

-- | <i>O(1).</i> Write a Word64 in native host order On a 32 bit machine
--   we write two host order Word32s, in big endian form. For portability
--   issues see <tt>putWordhost</tt>.
putWord64host :: Word64 -> Put

-- | <i>O(1).</i> Write a single native machine word. The word is written
--   in host order, host endian form, for the machine you're on. On a 64
--   bit machine the Int is an 8 byte value, on a 32 bit machine, 4 bytes.
--   Values written this way are not portable to different endian or word
--   sized machines, without conversion.
putInthost :: Int -> Put

-- | <i>O(1).</i> Write an Int16 in native host order and host endianness.
--   For portability issues see <tt>putInthost</tt>.
putInt16host :: Int16 -> Put

-- | <i>O(1).</i> Write an Int32 in native host order and host endianness.
--   For portability issues see <tt>putInthost</tt>.
putInt32host :: Int32 -> Put

-- | <i>O(1).</i> Write an Int64 in native host order On a 32 bit machine
--   we write two host order Int32s, in big endian form. For portability
--   issues see <tt>putInthost</tt>.
putInt64host :: Int64 -> Put

-- | Write a <a>Float</a> in native in IEEE-754 format and host endian.
putFloathost :: Float -> Put

-- | Write a <a>Double</a> in native in IEEE-754 format and host endian.
putDoublehost :: Double -> Put

-- | Write a character using UTF-8 encoding.
putCharUtf8 :: Char -> Put

-- | Write a String using UTF-8 encoding.
putStringUtf8 :: String -> Put
instance GHC.Base.Functor Data.Binary.Put.PutM
instance GHC.Base.Applicative Data.Binary.Put.PutM
instance GHC.Base.Monad Data.Binary.Put.PutM
instance GHC.Base.Monoid (Data.Binary.Put.PutM ())
instance GHC.Base.Semigroup (Data.Binary.Put.PutM ())


-- | Binary serialisation of Haskell values to and from lazy
--   <a>ByteString</a>s. The Binary library provides methods for encoding
--   Haskell values as streams of bytes directly in memory. The resulting
--   <a>ByteString</a> can then be written to disk, sent over the network,
--   or further processed (for example, compressed with gzip).
--   
--   The <tt>binary</tt> package is notable in that it provides both pure,
--   and high performance serialisation.
--   
--   Values encoded using the <a>Binary</a> class are always encoded in
--   network order (big endian) form, and encoded data should be portable
--   across machine endianness, word size, or compiler version. For
--   example, data encoded using the <a>Binary</a> class could be written
--   on any machine, and read back on any another.
--   
--   If the specifics of the data format is not important to you, for
--   example, you are more interested in serializing and deserializing
--   values than in which format will be used, it is possible to derive
--   <a>Binary</a> instances using the generic support. See
--   <a>GBinaryGet</a> and <a>GBinaryPut</a>.
--   
--   If you have specific requirements about the encoding format, you can
--   use the encoding and decoding primitives directly, see the modules
--   <a>Data.Binary.Get</a> and <a>Data.Binary.Put</a>.
module Data.Binary

-- | The <a>Binary</a> class provides <a>put</a> and <a>get</a>, methods to
--   encode and decode a Haskell value to a lazy <a>ByteString</a>. It
--   mirrors the <a>Read</a> and <a>Show</a> classes for textual
--   representation of Haskell types, and is suitable for serialising
--   Haskell values to disk, over the network.
--   
--   For decoding and generating simple external binary formats (e.g. C
--   structures), Binary may be used, but in general is not suitable for
--   complex protocols. Instead use the <a>PutM</a> and <a>Get</a>
--   primitives directly.
--   
--   Instances of Binary should satisfy the following property:
--   
--   <pre>
--   decode . encode == id
--   </pre>
--   
--   That is, the <a>get</a> and <a>put</a> methods should be the inverse
--   of each other. A range of instances are provided for basic Haskell
--   types.
class Binary t

-- | Encode a value in the Put monad.
put :: Binary t => t -> Put

-- | Decode a value in the Get monad
get :: Binary t => Get t

-- | Encode a list of values in the Put monad. The default implementation
--   may be overridden to be more efficient but must still have the same
--   encoding format.
putList :: Binary t => [t] -> Put

-- | Encode a value in the Put monad.
put :: (Binary t, Generic t, GBinaryPut (Rep t)) => t -> Put

-- | Decode a value in the Get monad
get :: (Binary t, Generic t, GBinaryGet (Rep t)) => Get t
class GBinaryGet f
gget :: GBinaryGet f => Get (f t)
class GBinaryPut f
gput :: GBinaryPut f => f t -> Put
data Get a

-- | Put merely lifts Builder into a Writer monad, applied to ().
type Put = PutM ()

-- | Efficiently write a byte into the output buffer
putWord8 :: Word8 -> Put

-- | Read a Word8 from the monad state
getWord8 :: Get Word8

-- | Encode a value using binary serialisation to a lazy ByteString.
encode :: Binary a => a -> ByteString

-- | Decode a value from a lazy ByteString, reconstructing the original
--   structure.
decode :: Binary a => ByteString -> a

-- | Decode a value from a lazy ByteString. Returning <a>Left</a> on
--   failure and <a>Right</a> on success. In both cases the unconsumed
--   input and the number of consumed bytes is returned. In case of
--   failure, a human-readable error message will be returned as well.
decodeOrFail :: Binary a => ByteString -> Either (ByteString, ByteOffset, String) (ByteString, ByteOffset, a)

-- | Lazily serialise a value to a file.
--   
--   This is just a convenience function, it's defined simply as:
--   
--   <pre>
--   encodeFile f = B.writeFile f . encode
--   </pre>
--   
--   So for example if you wanted to compress as well, you could use:
--   
--   <pre>
--   B.writeFile f . compress . encode
--   </pre>
encodeFile :: Binary a => FilePath -> a -> IO ()

-- | Decode a value from a file. In case of errors, <a>error</a> will be
--   called with the error message.
decodeFile :: Binary a => FilePath -> IO a

-- | Decode a value from a file. In case of success, the value will be
--   returned in <a>Right</a>. In case of decoder errors, the error message
--   together with the byte offset will be returned.
decodeFileOrFail :: Binary a => FilePath -> IO (Either (ByteOffset, String) a)
