-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


@package unison-hashing
@version 0.0.0

module Unison.Hashing.ContentAddressable

-- | A type class that is inhabited by types that can compute a hash of
--   their content.
--   
--   The base instances of this class should only live in dedicated
--   "hashing packages" such as <tt>unison-hashing-v2</tt>, whose types and
--   implementations should never change.
--   
--   Trivial wrapper instances can be written around these, but note these
--   pipelines from <tt>MyType ==&gt; SomeHashingType ==&gt; Hash</tt> must
--   take care not to change the <tt>MyType ==&gt; SomeHashingType</tt>
--   conversion, once written.
--   
--   For example, we might have a representation of some namespace in
--   memory
--   
--   <pre>
--   data Namespace = Namespace Terms Types OtherStuff CachesAndWhatnot
--   </pre>
--   
--   with a somewhat equivalent "hashing" type in some "hashing package",
--   with a ContentAddressable instance
--   
--   <pre>
--   data HashingNamespace = Namespace Terms Types
--   </pre>
--   
--   We can of course make our own convenience instance
--   
--   <pre>
--   instance ContentAddressable Namespace where
--     contentHash = contentHash . namespaceToHashingNamespace
--   </pre>
--   
--   But we must make sure that the implementation of
--   <tt>namespaceToHashingNamespace</tt> never changes the fields in the
--   corresponding <tt>HashingNamespace</tt>, even as features are added to
--   or removed from <tt>Namespace</tt>.
class ContentAddressable a
contentHash :: ContentAddressable a => a -> Hash
