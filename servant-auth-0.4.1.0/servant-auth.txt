-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Authentication combinators for servant
--   
--   This package provides an <tt>Auth</tt> combinator for <a>servant</a>.
--   This combinator allows using different authentication schemes in a
--   straightforward way, and possibly in conjunction with one another.
--   
--   'servant-auth' additionally provides concrete authentication schemes,
--   such as Basic Access Authentication, JSON Web Tokens, and Cookies.
--   
--   For more details on how to use this, see the <a>README</a>.
@package servant-auth
@version 0.4.1.0

module Servant.Auth

-- | <tt>Auth [auth1, auth2] val :&gt; api</tt> represents an API protected
--   *either* by <tt>auth1</tt> or <tt>auth2</tt>
data Auth (auths :: [*]) val

-- | A JSON Web Token (JWT) in the the Authorization header:
--   
--   <pre>
--   Authorization: Bearer &lt;token&gt;
--   </pre>
--   
--   Note that while the token is signed, it is not encrypted. Therefore do
--   not keep in it any information you would not like the client to know.
--   
--   JWTs are described in IETF's <a>RFC 7519</a>
data JWT

-- | A cookie. The content cookie itself is a JWT. Another cookie is also
--   used, the contents of which are expected to be send back to the server
--   in a header, for XSRF protection.
data Cookie

-- | Basic Auth.
data BasicAuth

-- | Login via a form.
data FormLogin form
instance Servant.Links.HasLink sub => Servant.Links.HasLink (Servant.Auth.Auth tag value Servant.API.Sub.:> sub)

module Servant.Auth.JWT

-- | How to decode data from a JWT.
--   
--   The default implementation assumes the data is stored in the
--   unregistered <tt>dat</tt> claim, and uses the <tt>FromJSON</tt>
--   instance to decode value from there.
class FromJWT a
decodeJWT :: FromJWT a => ClaimsSet -> Either Text a
decodeJWT :: (FromJWT a, FromJSON a) => ClaimsSet -> Either Text a

-- | How to encode data from a JWT.
--   
--   The default implementation stores data in the unregistered
--   <tt>dat</tt> claim, and uses the type's <tt>ToJSON</tt> instance to
--   encode the data.
class ToJWT a
encodeJWT :: ToJWT a => a -> ClaimsSet
encodeJWT :: (ToJWT a, ToJSON a) => a -> ClaimsSet
