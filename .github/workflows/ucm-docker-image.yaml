name: build and push ucm docker image

# Build docker image containing ucm executable
# Push to the github docker image repo (a.k.a. 'packages')

on:
  workflow_call:
    inputs:
      version:
        description: Semver version of the release. E.g. 0.5.19
        type: string
        required: false
      is_release:
        description: Whether this is a release build.
        type: boolean
        required: false
        default: false

  push:
    branches:
      - cp/test-ucm-docker-image

jobs:
  docker-image:
    name: Build and push ucm docker image
    runs-on: ubuntu-20.04

    # Sets the permissions granted to the `GITHUB_TOKEN` for the actions in this job.
    permissions:
      contents: read
      # Allow uploading the docker image to the container registry
      packages: write
      # Allow creating and updating the artifact attestation
      attestations: write
      # Required to get user information for building attestations
      id-token: write

    env:
      container_registry: ghcr.io
      docker_image_name: ${{ github.repository }}


    steps:
      - uses: actions/checkout@v4

      - name: Download ucm executable and ucm UI
        uses: actions/download-artifact@v4
        with:
          name: bundle-linux
          github-token: ${{ secrets.GITHUB_TOKEN }}
          run-id: 8975410616
          path: ./tmp/downloads

      - name: Unpack ucm bundle tar
        run: |
          ls -lah ./tmp/downloads
          mkdir -p ./tmp/ucm
          tar -xvf ./tmp/downloads/ucm-*.tar.gz -C ./tmp/ucm
          ls -lah ./tmp/ucm

      # Configure Docker's builder,
      # This seems necessary to support docker cache layers.
      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@d70bba72b1f3fd22344832f00baa16ece964efeb # v3.3.0

      # Uses the `docker/login-action` action to log in to the Container registry registry using the account and password that will publish the packages. Once published, the packages are scoped to the account defined here.
      - name: Log in to the Container registry
        uses: docker/login-action@e92390c5fb421da1463c202d546fed0ec5c39f20
        with:
          registry: ${{ env.container_registry }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # This step uses [docker/metadata-action](https://github.com/docker/metadata-action#about) to extract tags and labels that will be applied to the specified image. The `id` "meta" allows the output of this step to be referenced in a subsequent step. The `images` value provides the base name for the tags and labels.
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ env.container_registry }}/${{ env.docker_image_name }}
          flavor: |
            # We tag latest manually below.
            latest=false
          tags: |
            type=schedule
            type=raw,value=v0.5.19,enable=true
            type=ref,event=tag
            type=sha,format=long
            # set latest tag for pushes to trunk
            type=raw,value=latest,enable=true
            type=raw,value=nightly,enable=false


      # This step uses the `docker/build-push-action` action to build the image, based on your repository's `Dockerfile`. If the build succeeds, it pushes the image to GitHub Packages.
      # It uses the `context` parameter to define the build's context as the set of files located in the specified path. For more information, see "[Usage](https://github.com/docker/build-push-action#usage)" in the README of the `docker/build-push-action` repository.
      # It uses the `tags` and `labels` parameters to tag and label the image with the output from the "meta" step.
      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@2cdde995de11925a030ce8070c3d77a52ffcf1c0 # v5.3.0
        with:
          context: ./
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          # Use github actions cache for docker image layers
          cache-from: type=gha
          cache-to: type=gha,mode=max
