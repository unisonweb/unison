-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Fast, pure and practical SHA-1 implementation
--   
--   A practical incremental and one-pass, pure API to the <a>SHA-1 hash
--   algorithm</a> (including <a>HMAC</a> support) with performance close
--   to the fastest implementations available in other languages.
--   
--   The implementation is made in C with a haskell FFI wrapper that hides
--   the C implementation.
--   
--   NOTE: This package has been forked off <tt>cryptohash-0.11.7</tt>
--   because the <tt>cryptohash</tt> package has been deprecated and so
--   this package continues to satisfy the need for a lightweight package
--   providing the SHA1 hash algorithm without any dependencies on packages
--   other than <tt>base</tt> and <tt>bytestring</tt>.
--   
--   Consequently, this package can be used as a drop-in replacement for
--   <tt>cryptohash</tt>'s <a>Crypto.Hash.SHA1</a> module, though with a
--   clearly smaller footprint.
@package cryptohash-sha1
@version 0.11.101.0


-- | A module containing <a>SHA-1</a> bindings
module Crypto.Hash.SHA1

-- | SHA-1 Context
--   
--   The context data is exactly 92 bytes long, however the data in the
--   context is stored in host-endianness.
--   
--   The context data is made up of
--   
--   <ul>
--   <li>a <a>Word64</a> representing the number of bytes already feed to
--   hash algorithm so far,</li>
--   <li>a 64-element <a>Word8</a> buffer holding partial input-chunks, and
--   finally</li>
--   <li>a 5-element <a>Word32</a> array holding the current
--   work-in-progress digest-value.</li>
--   </ul>
--   
--   Consequently, a SHA-1 digest as produced by <tt>hash</tt>,
--   <tt>hashlazy</tt>, or <tt>finalize</tt> is 20 bytes long.
newtype Ctx
Ctx :: ByteString -> Ctx

-- | create a new hash context
init :: Ctx

-- | update a context with a bytestring
update :: Ctx -> ByteString -> Ctx

-- | updates a context with multiple bytestrings
updates :: Ctx -> [ByteString] -> Ctx

-- | finalize the context into a digest bytestring (20 bytes)
finalize :: Ctx -> ByteString

-- | Variant of <a>finalize</a> also returning length of hashed content
finalizeAndLength :: Ctx -> (ByteString, Word64)

-- | hash a strict bytestring into a Ctx
start :: ByteString -> Ctx

-- | hash a lazy bytestring into a Ctx
startlazy :: ByteString -> Ctx

-- | hash a strict bytestring into a digest bytestring (20 bytes)
hash :: ByteString -> ByteString

-- | hash a lazy bytestring into a digest bytestring (20 bytes)
hashlazy :: ByteString -> ByteString

-- | Variant of <a>hashlazy</a> which simultaneously computes the hash and
--   length of a lazy bytestring.
hashlazyAndLength :: ByteString -> (ByteString, Word64)

-- | Compute 20-byte <a>RFC2104</a>-compatible HMAC-SHA1 digest for a
--   strict bytestring message
hmac :: ByteString -> ByteString -> ByteString

-- | Compute 20-byte <a>RFC2104</a>-compatible HMAC-SHA1 digest for a lazy
--   bytestring messagvoide
hmaclazy :: ByteString -> ByteString -> ByteString

-- | Variant of <a>hmaclazy</a> which also returns length of message
hmaclazyAndLength :: ByteString -> ByteString -> (ByteString, Word64)
